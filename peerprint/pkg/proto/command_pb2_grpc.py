# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import peerprint.pkg.proto.command_pb2 as command__pb2
import peerprint.pkg.proto.peers_pb2 as peers__pb2
import peerprint.pkg.proto.state_pb2 as state__pb2


class CommandStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/command.Command/Ping',
                request_serializer=command__pb2.HealthCheck.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.GetId = channel.unary_unary(
                '/command.Command/GetId',
                request_serializer=command__pb2.GetIDRequest.SerializeToString,
                response_deserializer=command__pb2.GetIDResponse.FromString,
                )
        self.Connect = channel.unary_unary(
                '/command.Command/Connect',
                request_serializer=command__pb2.ConnectRequest.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/command.Command/Disconnect',
                request_serializer=command__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.GetConnections = channel.unary_unary(
                '/command.Command/GetConnections',
                request_serializer=command__pb2.GetConnectionsRequest.SerializeToString,
                response_deserializer=command__pb2.GetConnectionsResponse.FromString,
                )
        self.SetRecord = channel.unary_unary(
                '/command.Command/SetRecord',
                request_serializer=command__pb2.SetRecordRequest.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.StreamRecords = channel.unary_stream(
                '/command.Command/StreamRecords',
                request_serializer=command__pb2.StreamRecordsRequest.SerializeToString,
                response_deserializer=state__pb2.SignedRecord.FromString,
                )
        self.SetCompletion = channel.unary_unary(
                '/command.Command/SetCompletion',
                request_serializer=command__pb2.SetCompletionRequest.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.StreamCompletions = channel.unary_stream(
                '/command.Command/StreamCompletions',
                request_serializer=command__pb2.StreamCompletionsRequest.SerializeToString,
                response_deserializer=state__pb2.SignedCompletion.FromString,
                )
        self.Crawl = channel.unary_unary(
                '/command.Command/Crawl',
                request_serializer=command__pb2.CrawlRequest.SerializeToString,
                response_deserializer=command__pb2.CrawlResult.FromString,
                )
        self.StreamEvents = channel.unary_stream(
                '/command.Command/StreamEvents',
                request_serializer=command__pb2.StreamEventsRequest.SerializeToString,
                response_deserializer=command__pb2.Event.FromString,
                )
        self.Advertise = channel.unary_unary(
                '/command.Command/Advertise',
                request_serializer=command__pb2.AdvertiseRequest.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.SyncLobby = channel.unary_unary(
                '/command.Command/SyncLobby',
                request_serializer=command__pb2.SyncLobbyRequest.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.StopAdvertising = channel.unary_unary(
                '/command.Command/StopAdvertising',
                request_serializer=command__pb2.StopAdvertisingRequest.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.StreamNetworks = channel.unary_stream(
                '/command.Command/StreamNetworks',
                request_serializer=command__pb2.StreamNetworksRequest.SerializeToString,
                response_deserializer=peers__pb2.Network.FromString,
                )
        self.StreamAdvertisements = channel.unary_stream(
                '/command.Command/StreamAdvertisements',
                request_serializer=command__pb2.StreamAdvertisementsRequest.SerializeToString,
                response_deserializer=peers__pb2.Network.FromString,
                )
        self.SetStatus = channel.unary_unary(
                '/command.Command/SetStatus',
                request_serializer=command__pb2.SetStatusRequest.SerializeToString,
                response_deserializer=command__pb2.Ok.FromString,
                )
        self.StreamPeers = channel.unary_stream(
                '/command.Command/StreamPeers',
                request_serializer=command__pb2.StreamPeersRequest.SerializeToString,
                response_deserializer=peers__pb2.PeerStatus.FromString,
                )


class CommandServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCompletions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Crawl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Advertise(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncLobby(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopAdvertising(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamNetworks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAdvertisements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPeers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommandServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=command__pb2.HealthCheck.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'GetId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetId,
                    request_deserializer=command__pb2.GetIDRequest.FromString,
                    response_serializer=command__pb2.GetIDResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=command__pb2.ConnectRequest.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=command__pb2.DisconnectRequest.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'GetConnections': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnections,
                    request_deserializer=command__pb2.GetConnectionsRequest.FromString,
                    response_serializer=command__pb2.GetConnectionsResponse.SerializeToString,
            ),
            'SetRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRecord,
                    request_deserializer=command__pb2.SetRecordRequest.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'StreamRecords': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamRecords,
                    request_deserializer=command__pb2.StreamRecordsRequest.FromString,
                    response_serializer=state__pb2.SignedRecord.SerializeToString,
            ),
            'SetCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCompletion,
                    request_deserializer=command__pb2.SetCompletionRequest.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'StreamCompletions': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCompletions,
                    request_deserializer=command__pb2.StreamCompletionsRequest.FromString,
                    response_serializer=state__pb2.SignedCompletion.SerializeToString,
            ),
            'Crawl': grpc.unary_unary_rpc_method_handler(
                    servicer.Crawl,
                    request_deserializer=command__pb2.CrawlRequest.FromString,
                    response_serializer=command__pb2.CrawlResult.SerializeToString,
            ),
            'StreamEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamEvents,
                    request_deserializer=command__pb2.StreamEventsRequest.FromString,
                    response_serializer=command__pb2.Event.SerializeToString,
            ),
            'Advertise': grpc.unary_unary_rpc_method_handler(
                    servicer.Advertise,
                    request_deserializer=command__pb2.AdvertiseRequest.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'SyncLobby': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncLobby,
                    request_deserializer=command__pb2.SyncLobbyRequest.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'StopAdvertising': grpc.unary_unary_rpc_method_handler(
                    servicer.StopAdvertising,
                    request_deserializer=command__pb2.StopAdvertisingRequest.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'StreamNetworks': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamNetworks,
                    request_deserializer=command__pb2.StreamNetworksRequest.FromString,
                    response_serializer=peers__pb2.Network.SerializeToString,
            ),
            'StreamAdvertisements': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamAdvertisements,
                    request_deserializer=command__pb2.StreamAdvertisementsRequest.FromString,
                    response_serializer=peers__pb2.Network.SerializeToString,
            ),
            'SetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStatus,
                    request_deserializer=command__pb2.SetStatusRequest.FromString,
                    response_serializer=command__pb2.Ok.SerializeToString,
            ),
            'StreamPeers': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPeers,
                    request_deserializer=command__pb2.StreamPeersRequest.FromString,
                    response_serializer=peers__pb2.PeerStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'command.Command', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Command(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/Ping',
            command__pb2.HealthCheck.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/GetId',
            command__pb2.GetIDRequest.SerializeToString,
            command__pb2.GetIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/Connect',
            command__pb2.ConnectRequest.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/Disconnect',
            command__pb2.DisconnectRequest.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConnections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/GetConnections',
            command__pb2.GetConnectionsRequest.SerializeToString,
            command__pb2.GetConnectionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/SetRecord',
            command__pb2.SetRecordRequest.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/command.Command/StreamRecords',
            command__pb2.StreamRecordsRequest.SerializeToString,
            state__pb2.SignedRecord.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/SetCompletion',
            command__pb2.SetCompletionRequest.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamCompletions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/command.Command/StreamCompletions',
            command__pb2.StreamCompletionsRequest.SerializeToString,
            state__pb2.SignedCompletion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Crawl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/Crawl',
            command__pb2.CrawlRequest.SerializeToString,
            command__pb2.CrawlResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/command.Command/StreamEvents',
            command__pb2.StreamEventsRequest.SerializeToString,
            command__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Advertise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/Advertise',
            command__pb2.AdvertiseRequest.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncLobby(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/SyncLobby',
            command__pb2.SyncLobbyRequest.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopAdvertising(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/StopAdvertising',
            command__pb2.StopAdvertisingRequest.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamNetworks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/command.Command/StreamNetworks',
            command__pb2.StreamNetworksRequest.SerializeToString,
            peers__pb2.Network.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamAdvertisements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/command.Command/StreamAdvertisements',
            command__pb2.StreamAdvertisementsRequest.SerializeToString,
            peers__pb2.Network.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/command.Command/SetStatus',
            command__pb2.SetStatusRequest.SerializeToString,
            command__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/command.Command/StreamPeers',
            command__pb2.StreamPeersRequest.SerializeToString,
            peers__pb2.PeerStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
