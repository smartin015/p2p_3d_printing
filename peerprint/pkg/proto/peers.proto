syntax = "proto3";

option go_package = "github.com/smartin015/peerprint/pubsub/proto";

package peers;

message PeerStatus {
  string name = 1; // Human-readable name of this peer
  string active_record = 2;
  string active_unit = 3; // What part of the record are they working on
  string status = 4; // State of the machine or machines backing this peer
  string profile = 5; // Description of the peer's cababilities (profile enum)
}

// Matches https://pkg.go.dev/github.com/libp2p/go-libp2p/core/peer#AddrInfo
// using string encoding for id and addrs.
message AddrInfo {
  string id = 1;
  repeated string addrs = 2;
}

// RPC sent to neighbor peers to retrieve their neighbors
// This allows us to crawl the whole network to understand how many
// peers there are.
// See also CrawlPeersCommand/Response in command.proto
message GetPeersRequest {}
message GetPeersResponse {
  repeated AddrInfo Addresses = 1;
}

// Used to fetch status of peer over libp2p RPC
message GetStatusRequest{}

// NetworkConfig describes a print network of multiple peers.
// This is passed among peers via DHT/MDNS discovery and RPC
// to provide users a list of places they can join.
message NetworkConfig {
  string uuid = 1;
  string name = 2;
  string description = 3;
  repeated string tags = 4;
  repeated string links = 5;
  string location = 6;
  string rendezvous = 7;
  string creator = 9; // Public key of the creator of this network
  int64 created = 10;
}

// NetworkStats describes live and historical information about
// the network, other than its config
message NetworkStats {
  int64 population = 1;
  int64 completions_last7days = 2;
  int64 records = 3;
  int64 idle_records = 4;
  int64 avg_completion_time = 5;
}

message Network {
  NetworkConfig config = 1;
  bytes signature = 2;
  NetworkStats stats = 3;
}

message PubKeyExchange {
  bytes pubkey = 1;
  bytes salt = 2;
}

message EncryptedPSK {
  bytes encrypted = 1;
}
