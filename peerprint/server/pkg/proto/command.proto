syntax = "proto3";

option go_package = "github.com/smartin015/peerprint/pubsub/proto";

package command;

// Sent via ZMQ PUSH when the server has rendezvous'd with peers and
// begins its main loop
message NotifyReady{}

// Sent via ZMQ PUSH when the Sync operation completes
message NotifySync{}

// Sent via ZMQ PUSH when a message is received over pubsub
message NotifyMessage{}

// Exchanged between wrapper and process to ensure both are healthy
message HealthCheck{}

// This message is PUSHed when a Record's owner/signer/approver publishes a 
// Completion about their own Record - sponsoring an in-progress worker or
// indicating the record was completed.
message NotifyProgress{
  string uuid = 1;
  string resolved_completer = 2;
  bool completed = 3;
}

// Catch-all error message for when commands cannot be carried out by the server process.
message Error {
  string reason = 1; 
}
// Generic "OK" message
message Ok {}

message GetID {}
message IDResponse {
  string id = 1;
}

message CrawlPeers {
  bool RestartCrawl = 1; // Whether to start crawling anew
  int64 BatchSize = 2; // How many peers to query for this step
  int32 TimeoutMillis = 3; // Max amount of time to crawl before returning
}

message CrawlResult {
  int32 remaining = 2;
}
