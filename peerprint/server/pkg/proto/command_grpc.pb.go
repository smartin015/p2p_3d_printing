// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: command.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandClient interface {
	Ping(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*Ok, error)
	GetId(ctx context.Context, in *GetIDRequest, opts ...grpc.CallOption) (*GetIDResponse, error)
	GetNetworks(ctx context.Context, in *GetNetworksRequest, opts ...grpc.CallOption) (*GetNetworksResponse, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Ok, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*Ok, error)
	SetRecord(ctx context.Context, in *SetRecordRequest, opts ...grpc.CallOption) (*Ok, error)
	SetCompletion(ctx context.Context, in *SetCompletionRequest, opts ...grpc.CallOption) (*Ok, error)
	Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResult, error)
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (Command_StreamEventsClient, error)
	StreamRecords(ctx context.Context, in *StreamRecordsRequest, opts ...grpc.CallOption) (Command_StreamRecordsClient, error)
	StreamCompletions(ctx context.Context, in *StreamCompletionsRequest, opts ...grpc.CallOption) (Command_StreamCompletionsClient, error)
}

type commandClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandClient(cc grpc.ClientConnInterface) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) Ping(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/command.Command/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) GetId(ctx context.Context, in *GetIDRequest, opts ...grpc.CallOption) (*GetIDResponse, error) {
	out := new(GetIDResponse)
	err := c.cc.Invoke(ctx, "/command.Command/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) GetNetworks(ctx context.Context, in *GetNetworksRequest, opts ...grpc.CallOption) (*GetNetworksResponse, error) {
	out := new(GetNetworksResponse)
	err := c.cc.Invoke(ctx, "/command.Command/GetNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/command.Command/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/command.Command/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) SetRecord(ctx context.Context, in *SetRecordRequest, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/command.Command/SetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) SetCompletion(ctx context.Context, in *SetCompletionRequest, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/command.Command/SetCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResult, error) {
	out := new(CrawlResult)
	err := c.cc.Invoke(ctx, "/command.Command/Crawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (Command_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Command_ServiceDesc.Streams[0], "/command.Command/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Command_StreamEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type commandStreamEventsClient struct {
	grpc.ClientStream
}

func (x *commandStreamEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commandClient) StreamRecords(ctx context.Context, in *StreamRecordsRequest, opts ...grpc.CallOption) (Command_StreamRecordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Command_ServiceDesc.Streams[1], "/command.Command/StreamRecords", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandStreamRecordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Command_StreamRecordsClient interface {
	Recv() (*SignedRecord, error)
	grpc.ClientStream
}

type commandStreamRecordsClient struct {
	grpc.ClientStream
}

func (x *commandStreamRecordsClient) Recv() (*SignedRecord, error) {
	m := new(SignedRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commandClient) StreamCompletions(ctx context.Context, in *StreamCompletionsRequest, opts ...grpc.CallOption) (Command_StreamCompletionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Command_ServiceDesc.Streams[2], "/command.Command/StreamCompletions", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandStreamCompletionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Command_StreamCompletionsClient interface {
	Recv() (*SignedCompletion, error)
	grpc.ClientStream
}

type commandStreamCompletionsClient struct {
	grpc.ClientStream
}

func (x *commandStreamCompletionsClient) Recv() (*SignedCompletion, error) {
	m := new(SignedCompletion)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandServer is the server API for Command service.
// All implementations must embed UnimplementedCommandServer
// for forward compatibility
type CommandServer interface {
	Ping(context.Context, *HealthCheck) (*Ok, error)
	GetId(context.Context, *GetIDRequest) (*GetIDResponse, error)
	GetNetworks(context.Context, *GetNetworksRequest) (*GetNetworksResponse, error)
	Connect(context.Context, *ConnectRequest) (*Ok, error)
	Disconnect(context.Context, *DisconnectRequest) (*Ok, error)
	SetRecord(context.Context, *SetRecordRequest) (*Ok, error)
	SetCompletion(context.Context, *SetCompletionRequest) (*Ok, error)
	Crawl(context.Context, *CrawlRequest) (*CrawlResult, error)
	StreamEvents(*StreamEventsRequest, Command_StreamEventsServer) error
	StreamRecords(*StreamRecordsRequest, Command_StreamRecordsServer) error
	StreamCompletions(*StreamCompletionsRequest, Command_StreamCompletionsServer) error
	mustEmbedUnimplementedCommandServer()
}

// UnimplementedCommandServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServer struct {
}

func (UnimplementedCommandServer) Ping(context.Context, *HealthCheck) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCommandServer) GetId(context.Context, *GetIDRequest) (*GetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedCommandServer) GetNetworks(context.Context, *GetNetworksRequest) (*GetNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworks not implemented")
}
func (UnimplementedCommandServer) Connect(context.Context, *ConnectRequest) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedCommandServer) Disconnect(context.Context, *DisconnectRequest) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedCommandServer) SetRecord(context.Context, *SetRecordRequest) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecord not implemented")
}
func (UnimplementedCommandServer) SetCompletion(context.Context, *SetCompletionRequest) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompletion not implemented")
}
func (UnimplementedCommandServer) Crawl(context.Context, *CrawlRequest) (*CrawlResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crawl not implemented")
}
func (UnimplementedCommandServer) StreamEvents(*StreamEventsRequest, Command_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedCommandServer) StreamRecords(*StreamRecordsRequest, Command_StreamRecordsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRecords not implemented")
}
func (UnimplementedCommandServer) StreamCompletions(*StreamCompletionsRequest, Command_StreamCompletionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCompletions not implemented")
}
func (UnimplementedCommandServer) mustEmbedUnimplementedCommandServer() {}

// UnsafeCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServer will
// result in compilation errors.
type UnsafeCommandServer interface {
	mustEmbedUnimplementedCommandServer()
}

func RegisterCommandServer(s grpc.ServiceRegistrar, srv CommandServer) {
	s.RegisterService(&Command_ServiceDesc, srv)
}

func _Command_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Ping(ctx, req.(*HealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).GetId(ctx, req.(*GetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_GetNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).GetNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/GetNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).GetNetworks(ctx, req.(*GetNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_SetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).SetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/SetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).SetRecord(ctx, req.(*SetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_SetCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).SetCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/SetCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).SetCompletion(ctx, req.(*SetCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Crawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/Crawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Crawl(ctx, req.(*CrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServer).StreamEvents(m, &commandStreamEventsServer{stream})
}

type Command_StreamEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type commandStreamEventsServer struct {
	grpc.ServerStream
}

func (x *commandStreamEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Command_StreamRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRecordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServer).StreamRecords(m, &commandStreamRecordsServer{stream})
}

type Command_StreamRecordsServer interface {
	Send(*SignedRecord) error
	grpc.ServerStream
}

type commandStreamRecordsServer struct {
	grpc.ServerStream
}

func (x *commandStreamRecordsServer) Send(m *SignedRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _Command_StreamCompletions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCompletionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServer).StreamCompletions(m, &commandStreamCompletionsServer{stream})
}

type Command_StreamCompletionsServer interface {
	Send(*SignedCompletion) error
	grpc.ServerStream
}

type commandStreamCompletionsServer struct {
	grpc.ServerStream
}

func (x *commandStreamCompletionsServer) Send(m *SignedCompletion) error {
	return x.ServerStream.SendMsg(m)
}

// Command_ServiceDesc is the grpc.ServiceDesc for Command service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Command_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Command_Ping_Handler,
		},
		{
			MethodName: "GetId",
			Handler:    _Command_GetId_Handler,
		},
		{
			MethodName: "GetNetworks",
			Handler:    _Command_GetNetworks_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Command_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Command_Disconnect_Handler,
		},
		{
			MethodName: "SetRecord",
			Handler:    _Command_SetRecord_Handler,
		},
		{
			MethodName: "SetCompletion",
			Handler:    _Command_SetCompletion_Handler,
		},
		{
			MethodName: "Crawl",
			Handler:    _Command_Crawl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Command_StreamEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamRecords",
			Handler:       _Command_StreamRecords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCompletions",
			Handler:       _Command_StreamCompletions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "command.proto",
}
